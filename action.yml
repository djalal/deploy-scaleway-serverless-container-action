name: Deploy Scaleway Serverless Container
description: Allows you to deploy your Docker containers to Scaleway Serverless containers.
author: Tim Perry
branding:
  icon: 'grid'
  color: 'purple'
inputs:
  container_id:
    description: |
      The UUID of the container.
      This Action does not create containers, only update existing ones. You therefore need a container to be created initially, and take the ID from that.
      The ID can be found in the URL, the dashboard or the API.
    required: true
  secret_key:
    description: |
      The secret API key used to access Scaleway.
      This is generated from the Credentials page.
      This key must be for the right Organization.
      The key must have access to the Container Registry and the Serverless.
    required: true
  registry_image_url:
    description: |
      The URL for the registry, image, and version to use in the container, e.g: rg.fr-par.scw.cloud/example-registry/example-image:latest
    required: true
  api_version:
    description: |
      The version of the API to compare against.
    required: false
    default: 'v1beta1'
  region:
    description: |
      Scaleway region ID (one of `fr-par`, `nl-ams`, `pl-waw`).
    required: false
    default: 'fr-par'
  timeout_seconds:
    description: 'Timeout in seconds for the deployment'
    required: false
    default: '120'
  retry_attempts:
    description: 'Number of times to retry the deployment on failure'
    required: false
    default: '3'
runs:
  using: "composite"
  steps:
    - name: Deploy container with retries
      shell: bash
      run: |
        RETRY_COUNT=0
        MAX_RETRIES=${{ inputs.retry_attempts }}

        deploy() {
          echo "Updating container image to ${{ inputs.registry_image_url }}"
          curl --silent --fail -o /dev/null -w "Response: %{http_code}\n" \
            --request PATCH \
            --header "X-Auth-Token: ${{ inputs.secret_key }}" \
            --data '{"redeploy": true, "registry_image": "${{ inputs.registry_image_url }}"}' \
            https://api.scaleway.com/containers/${{ inputs.api_version }}/regions/${{ inputs.region }}/containers/${{ inputs.container_id }}

          echo "Redeploying container"
          curl --silent --fail -o /dev/null -w "Response: %{http_code}\n" \
            --request POST \
            --header "X-Auth-Token:${{ inputs.secret_key }}" \
            --data '{}' \
            https://api.scaleway.com/containers/${{ inputs.api_version }}/regions/${{ inputs.region }}/containers/${{ inputs.container_id }}/deploy

          echo "Waiting for deployment to succeed"
          SECONDS=0
          TIMEOUT=${{ inputs.timeout_seconds }}

          while true; do
            if [ $SECONDS -ge $TIMEOUT ]; then
              echo "Deployment timed out after $TIMEOUT seconds"
              return 1
            fi

            container=$(curl --silent \
              --request GET \
              --header "X-Auth-Token:${{ inputs.secret_key }}" \
              https://api.scaleway.com/containers/${{ inputs.api_version }}/regions/${{ inputs.region }}/containers/${{ inputs.container_id }} \
            )

            status=$(echo $container | jq -r '.status')
            error_message=$(echo $container | jq -r '.error_message')
            echo "Container status: $status"

            if [ "$status" = "pending" ]; then
              sleep 1
            elif [ "$status" = "ready" ]; then
              echo "Container deployed successfully"
              return 0
            else
              echo "Failed to deploy container - $status: $error_message"
              return 1
            fi
          done
        }

        until deploy; do
          RETRY_COUNT=$((RETRY_COUNT + 1))
          if [ $RETRY_COUNT -ge $MAX_RETRIES ]; then
            echo "Exceeded maximum retry attempts ($MAX_RETRIES). Deployment failed."
            exit 1
          fi
          echo "Retrying deployment ($RETRY_COUNT/$MAX_RETRIES)..."
          sleep 2
        done
